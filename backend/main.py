"""
FastAPI Application - Redator ENEM API
Sistema de corre√ß√£o autom√°tica de reda√ß√µes com auto-aprimoramento
"""
from fastapi import FastAPI
from fastapi.middleware.cors import CORSMiddleware
from loguru import logger

from app.core.config import settings, create_directories
from app.core.logging import setup_logging
from app.api.endpoints import correcao, modelo

# Setup logging
setup_logging()

# Criar diret√≥rios necess√°rios
create_directories()

# Criar aplica√ß√£o FastAPI
app = FastAPI(
    title=settings.APP_NAME,
    version=settings.APP_VERSION,
    description="""
    API para corre√ß√£o autom√°tica de reda√ß√µes ENEM com sistema de auto-aprimoramento.

    ## Funcionalidades

    * **Corre√ß√£o autom√°tica** - An√°lise completa com ML + an√°lise lingu√≠stica
    * **5 compet√™ncias ENEM** - Avalia√ß√£o detalhada de cada compet√™ncia
    * **Feedback personalizado** - Pontos fortes e a melhorar
    * **Sistema de confian√ßa** - Predi√ß√µes com n√≠vel de confian√ßa
    * **Auto-aprimoramento** - Modelo melhora automaticamente a cada uso
    * **Feedback opcional** - Professores podem validar corre√ß√µes

    ## Tecnologias

    - BERTimbau (BERT para portugu√™s)
    - Ensemble Learning (m√∫ltiplos modelos)
    - LanguageTool (an√°lise gramatical)
    - Supabase (banco de dados)
    - Celery (re-treino autom√°tico)
    """,
    docs_url="/docs",
    redoc_url="/redoc"
)

# Configurar CORS
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],  # Em produ√ß√£o, especificar dom√≠nios permitidos
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# Incluir routers
app.include_router(
    correcao.router,
    prefix=f"{settings.API_V1_PREFIX}/correcao",
    tags=["Corre√ß√£o de Reda√ß√µes"]
)

app.include_router(
    modelo.router,
    prefix=f"{settings.API_V1_PREFIX}/modelo",
    tags=["Informa√ß√µes do Modelo"]
)


@app.on_event("startup")
async def startup_event():
    """
    Evento executado ao iniciar a aplica√ß√£o
    """
    logger.info("=" * 70)
    logger.info(f"üöÄ Iniciando {settings.APP_NAME} v{settings.APP_VERSION}")
    logger.info("=" * 70)
    logger.info(f"Ambiente: {settings.ENVIRONMENT}")
    logger.info(f"Debug: {settings.DEBUG}")
    logger.info(f"API Prefix: {settings.API_V1_PREFIX}")
    logger.info(f"Supabase URL: {settings.SUPABASE_URL}")
    logger.info(f"Modelo: {settings.MODEL_NAME}")
    logger.info(f"Ensemble Size: {settings.ENSEMBLE_SIZE}")
    logger.info(f"Confidence Threshold: {settings.CONFIDENCE_THRESHOLD}")
    logger.info("=" * 70)

    # Pr√©-carregar predictor e analyzer para melhor performance
    try:
        from app.ml.predictor import get_predictor
        from app.services.linguistic_analyzer import get_linguistic_analyzer

        logger.info("Carregando modelos ML...")
        predictor = get_predictor()
        logger.info(f"‚úì Predictor carregado: {predictor.model_version}")

        logger.info("Carregando analisador lingu√≠stico...")
        analyzer = get_linguistic_analyzer()
        logger.info("‚úì Analisador lingu√≠stico carregado")

        logger.info("=" * 70)
        logger.info("‚ú® Aplica√ß√£o pronta para receber requisi√ß√µes!")
        logger.info("=" * 70)

    except Exception as e:
        logger.error(f"‚ö† Erro ao carregar modelos: {str(e)}")
        logger.warning("A aplica√ß√£o continuar√°, mas pode ter performance reduzida")


@app.on_event("shutdown")
async def shutdown_event():
    """
    Evento executado ao desligar a aplica√ß√£o
    """
    logger.info("=" * 70)
    logger.info(f"üõë Encerrando {settings.APP_NAME}")
    logger.info("=" * 70)


@app.get("/")
async def root():
    """
    Endpoint raiz - Informa√ß√µes b√°sicas da API
    """
    return {
        "name": settings.APP_NAME,
        "version": settings.APP_VERSION,
        "status": "running",
        "docs": "/docs",
        "health": f"{settings.API_V1_PREFIX}/modelo/health"
    }


@app.get("/ping")
async def ping():
    """
    Endpoint simples para verificar se API est√° respondendo
    """
    return {"status": "ok", "message": "pong"}


if __name__ == "__main__":
    import uvicorn

    uvicorn.run(
        "main:app",
        host=settings.HOST,
        port=settings.PORT,
        reload=settings.DEBUG,
        log_level=settings.LOG_LEVEL.lower()
    )
